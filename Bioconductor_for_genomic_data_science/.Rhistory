cds.proms = findOverlaps(cds, proms)
h = unique(queryHits(cds.proms))
h = unique(queryHits(proms.cds))
count = 0
for (i in h) {
count = count + vcountPattern('TATAAA', DNAStringSet(Views(Hsapiens, proms[i])))
}
h = unique(queryHits(cds.proms))
count = 0
for (i in h) {
count = count + vcountPattern('TATAAA', DNAStringSet(Views(Hsapiens, proms[i])))
}
count
q('no')
con =url("http://bowtie-bio.sourceforge.net/recount/ExpressionSets/montpick_eset.RData")
load(file=con)
close(con)
mp = montpick.eset
pdata=pData(mp)
edata=as.data.frame(exprs(mp))
fdata = fData(mp)
edata2 = log2(edata + 1)
edata3 = edata2 - rowMeans(edata2)
edata1 = edata
svd1 = svd(edata1)
svd2 = svd(edata2)
svd3 = svd(edata3)
svd1$d^2/sum(svd1^d^2)[1]
svd2$d^2/sum(svd2^d^2)[1]
svd3$d^2/sum(svd3^d^2)[1]
library(Biobase)
con =url("http://bowtie-bio.sourceforge.net/recount/ExpressionSets/montpick_eset.RData")
load(file=con)
close(con)
mp = montpick.eset
pdata=pData(mp)
edata=as.data.frame(exprs(mp))
fdata = fData(mp)
edata2 = log2(edata + 1)
edata3 = edata2 - rowMeans(edata2)
edata1 = edata
svd1 = svd(edata1)
svd2 = svd(edata2)
svd3 = svd(edata3)
svd1$d^2/sum(svd1^d^2)[1]
svd2$d^2/sum(svd2^d^2)[1]
svd3$d^2/sum(svd3^d^2)[1]
svd1$d
svd1$d^2/sum(svd1$d^2)[1]
svd2$d^2/sum(svd2$d^2)[1]
svd3$d^2/sum(svd3$d^2)[1]
svd3$d^2/sum(svd3$d^2)
svd3$d^2/sum(svd3$d^2)[1,]
svd3$d^2/sum(svd3$d^2)[1]
(svd3$d^2/sum(svd3$d^2))[1]
(svd1$d^2/sum(svd1$d^2))[1]
(svd2$d^2/sum(svd2$d^2))[1]
(svd3$d^2/sum(svd3$d^2))[1]
plot(svd1$d^2/sum(svd1$d^2))
set.seed(333)
names(svd1)
?kmeans
kmeans(edata 2)
kmeans(edata, 2)
svd3$d
svd3$v
svd3$v[1]
?svd
svd3$v[,1]
dim(svd3$v)
edata3.kms = kmeans(edata3, 2)
head(edata3.kms)
table(edata3.kms)
edata3.kms$cluster
edata3.kms = kmeans(t(edata3), 2)
edata3.kms$cluster
length(edata3.kms)
length(edata3.kms$cluster)
corr(edata3.kms, svd3$v[,1])
?cor
cor(edata3.kms, svd3$v[,1])
unlist(edata3.kms)
cor(edata3.kms, svd3$v[,1])
as.numeric(edata3.kms$cluster)
cor(as.numeric(edata3.kms$cluster), svd3$v[,1])
cor(svd3$v[,1], as.numeric(edata3.kms$cluster))
cor(svd3$v[1,], as.numeric(edata3.kms$cluster))
svd3$v[,1]
?svd
binary
binary()
round()
round(svd3$v[,1])
svd3$u[1,]
cor(svd3$u[1,], as.numeric(edata3.kms$cluster))
cor(svd3$u[,1], as.numeric(edata3.kms$cluster))
cor(svd3$v[,1], as.numeric(edata3.kms$cluster))
as.numeric(edata3.kms$cluster)
as.numeric(edata3.kms$cluster)-1
cor(svd3$v[,1], as.numeric(edata3.kms$cluster)-1)
con =url("http://bowtie-bio.sourceforge.net/recount/ExpressionSets/bodymap_eset.RData")
load(file=con)
close(con)
bm = bodymap.eset
edata = exprs(bm)
pdata_bm=pData(bm)
summary(edata)
str(edata)
head(edata)
head(pdata)
str(pdata)
summary(pdata)
summary(pdata_bm)
head(pdata_bm)
head(edata)
edata[1,]
lm1 = lm(edata[1,] ~ pdata_bm$num.tech.reps)
plot(lm1)
lm1
plot(pdata_bm$num.tech.reps, edata[1,])
abline(lm1)
head(pdata_bm)
lm2 = lm(edata[1,] ~ pdata_bm$gender + pdata_bm$age)
tidy(lm2)
library(broom)
tidy(lm2)
con =url("http://bowtie-bio.sourceforge.net/recount/ExpressionSets/montpick_eset.RData")
load(file=con)
close(con)
mp = montpick.eset
pdata=pData(mp)
edata=as.data.frame(exprs(mp))
fdata = fData(mp)
head(pdata)
edata = log2(as.matrix(edata) + 1)
mod1 = model.matrix( ~ pdata$population)
fit1 = lm.fit(mod1, t(edata))
dim(fit1$residuals)
dim(fit1$effects)
dim(fit1$coefficients)
?lm.fit
head(fit1$effects)
fit1$effects[1,]
fit1$effects[1,1]
fit1$effects[,1]
library(limma)
con =url("http://bowtie-bio.sourceforge.net/recount/ExpressionSets/bodymap_eset.RData")
load(file=con)
close(con)
bm = bodymap.eset
edata = exprs(bm)
pdata_bm=pData(bm)
str(edata)
summary(edata)
str(pdata_bm)
summary(pdata_bm)
?na.rm
?subset
pdata_bm$age == NA
which(pdata_bm$age == NA)
?which
pdata_bm$agewhich
pdata_bm$age
which(LETTERS == "R")
LETTERS
which(pdata_bm$age == 'NA')
pdata_bm
which(pdata_bm$age == 'F')
pdata_bm[pdata_bm$age == 'NA']
is.na(pdata_bm$age == 'NA')
is.na(pdata_bm$age == NA)
pdata_bm$sample.id[is.na(pdata_bm$age == 'NA')]
head(edata)
na.cols = pdata_bm$sample.id[is.na(pdata_bm$age == 'NA')]
head(subset(edata, select = -na.cols))
na.cols
list(na.cols)
?vector
vector(na.cols)
head(subset(edata, select = -c('ERS025084','ERS025087','ERS025093')))
head(subset(edata, select = c('ERS025084','ERS025087','ERS025093')))
?subset
edata[, !(colnames(edata) %in% na.cols)]
head(edata[, !(colnames(edata) %in% na.cols)])
na.cols
head(edata)
edata.rm.age.na = edata[, !(colnames(edata) %in% na.cols)]
mod2 = model.matrix( ~ pdata_bm$age)
fit.limma = liFit(edata.rm.age.na, mod2)
edata.rm.age.na = edata[, !(colnames(edata) %in% na.cols)]
mod2 = model.matrix( ~ pdata_bm$age)
fit.limma = lmFit(edata.rm.age.na, mod2)
names(fit.limma)
head(fit.limma$coefficients)
fit.limma$coefficients[1000]
fit.limma$coefficients[1000,]
plot(edata.rm.age.na[1000], pdata_bm$age[1000])
plot(edata.rm.age.na[1000], pdata_bm$age)
head(edata.rm.age.na)
plot(pdata_bm$age, edata.rm.age.na[1000,])
edata.rm.age.na[1000,]
pdata_bm
pdata_bm.rm.na = subset(pdata_bm, select = -na.cols)
pdata_bm.rm.na = pdata_bm[, !(colnames(pdata_bm) %in% na.cols)]
plot(pdata_bm.rm.na$age, edata.rm.age.na[1000,])
dim(pdata_bm.rm.na)
dim(edata.rm.age.na)
pdata_bm.rm.na
pdata_bm.rm.na = pdata_bm[, !(rownames(pdata_bm) %in% na.cols)]
rownames(pdata_bm)
rownames(pdata_bm) == na.cols
rownames(pdata_bm) %in% na.cols
pdata_bm.rm.na = pdata_bm[!(rownames(pdata_bm) %in% na.cols),]
pdata_bm.rm.na
plot(pdata_bm.rm.na$age, edata.rm.age.na[1000,])
plot(rownames(edata), edata[,'ERS025091'])
plot(edata[,'ERS025091'])
rownames(edata)
rownames(pdata_bm)
plot(edata[,'ERS025098'])
names(fit.limma)
head(fit.limma$coefficients)
pdata_bm
mod2_adj = model.matrix( ~ pdata_bm.rm.na$age + as.factor(pdata_bm.rm.na$tissue.type))
fit.limma.adj = lmFit(edata.rm.age.na, mod2_adj)
mod2 = model.matrix( ~ pdata_bm.rm.na$age)
fit.limma = lmFit(edata.rm.age.na, mod2)
fit.limma$coefficients[1000,]
head(fit.limma.adj$coefficients)
pdata_bm
summary(edata[,'ERS025091'])
summary(edata[,'ERS025090'])
summary(edata)
con =url("http://bowtie-bio.sourceforge.net/recount/ExpressionSets/montpick_eset.RData")
load(file=con)
close(con)
mp = montpick.eset
pdata=pData(mp)
edata=as.data.frame(exprs(mp))
fdata = fData(mp)
head(pdata)
summary(pdata)
con =url("http://bowtie-bio.sourceforge.net/recount/ExpressionSets/bodymap_eset.RData")
load(file=con)
close(con)
bm = bodymap.eset
edata = exprs(bm)
pdata_bm=pData(bm)
set.seed(33353)
library(sva)
source("https://bioconductor.org/biocLite.R")
biocLite("snpStats")
library(snpStats)
library(survival)
q('no')
library(sva)
library(snpStats)
con =url("http://bowtie-bio.sourceforge.net/recount/ExpressionSets/bodymap_eset.RData")
load(file=con)
close(con)
bm = bodymap.eset
edata = exprs(bm)
pdata_bm=pData(bm)
set.seed(33353)
library(Biobase)
con =url("http://bowtie-bio.sourceforge.net/recount/ExpressionSets/bodymap_eset.RData")
load(file=con)
close(con)
bm = bodymap.eset
edata = exprs(bm)
pdata_bm=pData(bm)
set.seed(33353)
edata.trans = log2(edata + 1)
edata.trans = edata.trans[rowMeans(edata.trans) >= 1, ]
pdata_bm
na.cols = pdata_bm$sample.id[is.na(pdata_bm$age == 'NA')]
edata.rm.na = edata.trans[, !(colnames(edata.trans) %in% na.cols)]
pdata_bm.rm.na = pdata_bm[!(rownames(pdata_bm) %in% na.cols),]
mod = model.matrix(~pdata_bm.rm.na$age, data=edata.rm.na)
mod0 = model.matrix(~1, data=edata.rm.na)
sva1 = sva(edata.rm.na, mod, mod0, sv=2)
str(edata.rm.na)
head(edata.rm.na)
edata.rm.na = edata.trans[, !(colnames(edata.trans) %in% na.cols)]
mod = model.matrix( ~ pdata_bm.rm.na$age, data=edata.rm.na)
mod = model.matrix( ~ pdata_bm.rm.na$age, data = edata.rm.na)
?model.matrix
as.data.frame(edata.rm.na)
mod = model.matrix( ~ pdata_bm.rm.na$age, data = as.data.frame(edata.rm.na))
mod0 = model.matrix(~1, data=as.data.frame(edata.rm.na))
sva1 = sva(edata.rm.na, mod, mod0, sv=2)
sva1 = sva(edata.rm.na, mod, mod0, n.sv=2)
sva1 = sva(as.data.frame(edata.rm.na), mod, mod0, n.sv=2)
mod
mod0
mod
mod0 = model.matrix(~, data=as.data.frame(edata.rm.na))
mod0 = model.matrix( ~ , data=as.data.frame(edata.rm.na))
mod = model.matrix( ~ pdata_bm.rm.na$age, data = as.data.frame(pdata_bm.rm.na))
mod = model.matrix( ~ pdata_bm.rm.na$age, data = pdata_bm.rm.na)
mod = model.matrix( ~ pdata_bm.rm.na$age, data = pdata_bm.rm.na)
mod0 = model.matrix(~1, data=pdata_bm.rm.na)
sva1 = sva(edata.rm.na, mod, mod0, n.sv=2)
sva1$sv
summary(lm(sva1$sv ~ pdata_bm$age))
cor(sva1$sv, pdata_bm.rm.na$age)
sva1 = sva(edata.rm.na, mod, mod0, n.sv=1)
cor(sva1$sv, pdata_bm.rm.na$age)
cor(sva1$sv, pdata_bm.rm.na$gender)
cor(sva1$sv, as.factor(pdata_bm.rm.na$gender))
pdata_bm.rm.na
as.factor(pdata_bm.rm.na$gender)
as.numeric(pdata_bm.rm.na$gender)
cor(sva1$sv, as.numeric(pdata_bm.rm.na$gender))
cor(sva1$sv, as.numeric(pdata_bm.rm.na$race))
con =url("http://bowtie-bio.sourceforge.net/recount/ExpressionSets/bodymap_eset.RData")
load(file=con)
close(con)
bm = bodymap.eset
edata = exprs(bm)
pdata_bm=pData(bm)
lm1 = lm(edata[1,] ~ pdata_bm$num.tech.reps)
plot(pdata_bm$num.tech.reps, edata[1,])
abline(lm1)
q('no')
library(ALL)
data(ALL)
expression.data = exprs(ALL)
library(biomaRt)
mart = useMart(host='feb2014.archive.ensembl.org', biomart = "ENSEMBL_MART_ENSEMBL")
hg19.ensembl = useDataset("hsapiens_gene_ensembl", mart)
vals = rownames(expression.data)
atts = c("ensembl_gene_id", "affy_hg_u95av2")
ensmbl_id.feat = getBM(attributes = atts, filters = "affy_hg_u95av2", values = vals, mart = hg19.ensembl)
l = ensmbl_id.feat[1:100,]
table(l)
table(l)==1
which(table(l)==1)
length(which(table(l)==1))
length(which(table(l)>1))
length(which(table(ensmbl_id.feat)>1))
?table
a <- letters[1:3]
a
sample(a)
table(a, sample(a))
?as.table
?lapply
xx = cbind(c('a','b','d','c'),c('1','2','3','3'))
xx
table(xx)
table(xx[,2])
table(l[,2])
table(l[,2])==1
which(table(l[,2])==1)
which(table(l[,2])>1)
length(which(table(l[,2])>1))
length(which(table(ensmbl_id.feat[,2])>1))
total.attri = listAttributes(hg19.ensembl)
head(total.attri)
ensmbl_id.feat2 = getBM(attributes = c('chromosome_name', "ensembl_gene_id", "affy_hg_u95av2"), filters = "affy_hg_u95av2", values = vals, mart = hg19.ensembl)
ensmbl_id.feat2[1:10,]
table(ensmbl_id.feat2[1,])
ensmbl_id.feat2[1:10,1]
table(ensmbl_id.feat2[,1])
as.character(1:10)
autosomes = as.character(1:22)
autosomes
?subset
ensmbl_id.feat3 = subset(ensmbl_id.feat2, chromosome_name=autosomes)
head(ensmbl_id.feat3)
ensmbl_id.feat3 = subset(ensmbl_id.feat2, chromosome_name==autosomes)
?intersect
ensmbl_id.feat3 = subset(ensmbl_id.feat2, chromosome_name==autosomes)
ensmbl_id.feat3 = intersect(ensmbl_id.feat2, autosomes)
head(ensmbl_id.feat3)
ensmbl_id.feat3 = subset(ensmbl_id.feat2, chromosome_name==autosomes)
head(ensmbl_id.feat3)
table(ensmbl_id.feat3[,1])
dim(ensmbl_id.feat3)
dim(ensmbl_id.feat2)
table(ensmbl_id.feat3[,1])
table(ensmbl_id.feat2[,1])
ensmbl_id.feat3 = ensmbl_id.feat2[ensmbl_id.feat2[,1] in autosomes, ]
?in
ensmbl_id.feat3 = ensmbl_id.feat2[ensmbl_id.feat2[,1] %in% autosomes, ]
dim(ensmbl_id.feat3)
head(ensmbl_id.feat3)
table(ensmbl_id.feat2[,1])
table(ensmbl_id.feat3[,1])
length(table(ensmbl_id.feat3[,3]))
source("https://bioconductor.org/biocLite.R")
biocLite("minfiData")
data(minfiData)
library(minfiData)
data(minfiData)
minfiData
data(MsetEx)
q('no')
library(minfiData)
data(MsetEx)
MsetEx
?MsetEx
pData(MsetEx)
eData(MsetEx)
exprs(MsetEx)
?minfiData
?"minfi"
?minfi
MsetEx
assayData(MsetEx)
MsetEx$assayData
sampleNames(MsetEx)
AnnotatedDataFrame(MsetEx)
MsetEx$AnnotatedDataFrame
MsetEx$.AnnotatedDataFrame
assay(MsetEx)
annotation(MsetEx)
MsetEx$Meth
pData(MsetEx)
MsetEx
fData(MsetEx)
Meth(MsetEx)
MsetEx.Meth
head(getMeth(MSet))
head(getMeth(MsetEx))
head(getMeth(MsetEx)$5723646052_R04C01)
methyl = getMeth(MsetEx)
dim(methyl)
methyl[1:3, '5723646052_R04C01']
mean(methyl[, '5723646052_R04C01'])
library(GEOquery)
elist = getGEO("GSE788")
length(elist)
elist = getGEO("GSE788")
length(elist)
elist = getGEO("GSE788")
elist = getGEO("GSE788")
?getGEO
elist = getGEO(filename = '/Users/Kai/Desktop/GPL85.txt')
length(elist)
elist[[1]]
elist[1]
names(elist)
elist
elist = getGEO(filename = '/var/folders/_x/b9vxmqjs5wg1m_3lvlrzb0_40000gn/T//RtmpMXnnAr/GSE788_series_matrix.txt.gz')
elist = getGEO("GSE788")
?download.file
getwd()
setwd('/Users/Kai/Lu/MOOC/coursera/genomic_certificate/bioconductor')
download.file('http://www.ncbi.nlm.nih.gov/geo/query/acc.cgi?targ=self&acc=GPL85&form=text&view=full', 'gpl85')
elist = getGEO("gpl85")
elist = getGEO(filename = "gpl85")
elist
elist = getGEO(filename = "gpl85")
gse <- getGEO("GSE781",GSEMatrix=FALSE)
gse
names(gse)
head(Meta(gse))
head(Meta(elist))
elist = getGEO(filename="gpl85")
names(GSMList(elist))
names(GSLList(elist))
head(elist)
GSMList(elist)
type(elist)
show(elist)
sessionInfo()
elist [[1]]
elist[1]
elist = getGEO("GSE788")
elist = getGEO(filename = "GSE788_series_matrix.txt.gz")
elist = getGEO(filename = "GSE788_series_matrix.txt.gz")
elist = getGEO(filename = "gpl85")
gse <- getGEO("GSE61538", GSEMatrix=TRUE)
gse <- getGEO("GSE788", GSEMatrix=TRUE)
gse <- getGEO("GSE788", GSEMatrix=TRUE)
elist = getGEO(filename = "GSE788_series_matrix.txt.gz")
elist = getGEO(filename = "GSE788_series_matrix.txt.gz")
gse = getGEO(filename = 'GSE788_family.soft.gz')
gse
names(gse)
name(gse)
gse$ID
gse$GSM9030
?gse
eData(gse)
pData(gse)
colnames(Table(gse))
Meta(gse)
Meta(gse)$sample_id
Meta(gse)$"GSM9024"
exprs(gse)
exprs(Meta(gse))
?Meta
signature(object = "gse")
header(gse)
?signature
Columns(gse)
names(GSMList(gse))
GSMList(gse)[[2]]
GSMList(gse)[[2]]$VALUE
VALUE(GSMList(gse)[[2]])
GSMList(gse)[[2]]
GSMList(gse)[2]
GEODataTable
?GEODataTable
Table(gse)
Table(GSMList(gse)[[2]])
head(Table(GSMList(gse)[[2]]))
mean(Table(GSMList(gse)[[2]])$VALUE)
q('no')
